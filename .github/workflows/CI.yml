name: CI
on:
  push:
    branches:
      - main
    tags: ['*']
  pull_request:
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  test:
    name: ${{ matrix.downgrade && 'Downgrade / ' || '' }}Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1'
          - '1.6'
          - 'nightly'
        os:
          - ubuntu-latest
        arch:
          - x64
        downgrade:
          - false
        include:
          - version: '1'
            os: ubuntu-latest
            arch: x64
            downgrade: true
    steps:
      - uses: actions/checkout@v4
      - uses: r-lib/actions/setup-r@v2
        if: matrix.os == 'ubuntu-latest'
      - name: Set R lib path for RCall.jl
        if: matrix.os == 'ubuntu-latest'
        run: echo "LD_LIBRARY_PATH=$(R RHOME)/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
      - name: Install R packages
        if: matrix.os == 'ubuntu-latest'
        run: |
          install.packages("remotes")
          remotes::install_github("stan-dev/loo")
        shell: Rscript {0}
        env:
          GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-downgrade-compat@v1
        with:
          skip: LinearAlgebra,Markdown,Printf,Random,Statistics
        if: ${{ matrix.downgrade }}
        name: Downgrade dependencies to oldest supported versions
      - uses: julia-actions/julia-buildpkg@v1
      - name: Build RCall
        run: |
          using Pkg
          Pkg.build("RCall")
        shell: julia --color=yes {0}
      - name: Build Conda
        run: |
          using Pkg; Pkg.activate(; temp=true);
          Pkg.add("Conda");
          Pkg.build("Conda");
        shell: julia --color=yes {0}
      - uses: julia-actions/julia-runtest@v1
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v4
        with:
          files: lcov.info
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - name: Install dependencies, build and deploy
        run: |
          using Pkg
          Pkg.develop(PackageSpec(path=pwd()))
          Pkg.instantiate()
          include(joinpath(pwd(), "docs", "make.jl"))
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
        shell: julia --color=yes --project=docs/ {0}
